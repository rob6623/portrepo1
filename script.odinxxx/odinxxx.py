import base64;exec base64.b64decode('import xbmc , xbmcaddon , xbmcgui , xbmcplugin , urllib , urllib2 , os , re , sys , shutil
import base64 , time , datetime
from resources . modules import plugintools
from resources . modules import notify
if 64 - 64: i11iIiiIii
OO0o = 'script.odinxxx'
Oo0Ooo = '[COLOR white]XXX[/COLOR]'
O0O0OO0O0O0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'fanart.jpg' ) )
iiiii = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'icon.png' ) )
ooo0OO = xbmcgui . Dialog ( )
II1 = xbmcgui . DialogProgress ( )
O00ooooo00 = xbmcaddon . Addon ( ) . getSetting
I1IiiI = xbmcaddon . Addon ( ) . getAddonInfo
IIi1IiiiI1Ii = xbmc . translatePath ( 'special://home/' )
I11i11Ii = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data/' + OO0o , 'settings.xml' ) )
oO00oOo = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data/' + OO0o , 'parental' ) )
OOOo0 = xbmc . translatePath ( os . path . join ( 'special://home/userdata/addon_data/' + OO0o ) )
Oooo000o = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o ) )
IiIi11iIIi1Ii = xbmc . translatePath ( os . path . join ( 'special://home/addons/plugin.video.f4mTester' ) )
Oo0O = xbmc . translatePath ( os . path . join ( Oooo000o , 'resources/disclaimer.txt' ) )
IiI = xbmc . translatePath ( os . path . join ( OOOo0 , 'agreed.txt' ) )
if 59 - 59: I11i / Ii1I
IiiIII111iI = 'http://www.xnxx.com/new'
IiII = 'http://www.xnxx.com/best'
iI1Ii11111iIi = 'http://www.xnxx.com/hot'
i1i1II = 'http://www.xnxx.com/hits'
O0oo0OO0 = 'http://www.xnxx.com'
if 6 - 6: oooO0oo0oOOOO - ooO0oo0oO0 - i111I * II1Ii1iI1i
if not os . path . exists ( IiI ) : notify . AgreeAdult ( msg = Oo0O )
if 12 - 12: o0oOoO00o
def i1 ( ) :
 if plugintools . get_setting ( 'firstrun' ) == 'true' :
  oOOoo00O0O ( )
  plugintools . set_setting ( 'firstrun' , 'false' )
 if plugintools . get_setting ( 'enablexxxpass' ) == 'true' :
  i1111 = xbmc . Keyboard ( '' , 'Enter Your Password' , False )
  i1111 . doModal ( )
  if ( i1111 . isConfirmed ( ) ) :
   i11 = i1111 . getText ( )
   if i11 == plugintools . get_setting ( 'xxxpass' ) :
    I11 ( "[COLOR blue]########### [B]XNXXX[/B] ###########[/COLOR]" , "url" , 9999 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR yellow][B]Search[/B][/COLOR]" , "url" , 4 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]Featured Videos[/COLOR]" , O0oo0OO0 , 1 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]New Videos[/COLOR]" , IiiIII111iI , 1 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]Hot Videos[/COLOR]" , iI1Ii11111iIi , 1 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]The Best of[/COLOR]" , IiII , 1 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]Top Hits[/COLOR]" , i1i1II , 1 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]Catagories[/COLOR]" , 'url' , 3 , iiiii , O0O0OO0O0O0 )
    I11 ( "[COLOR blue]######## [B]Perfect Girls[/B] #######[/COLOR]" , "url" , 9999 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR yellow][B]Search[/B][/COLOR]" , "url" , 10 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]Catagories[/COLOR]" , "url" , 11 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]Featured Videos[/COLOR]" , "url" , 14 , iiiii , O0O0OO0O0O0 )
    Oo0o0000o0o0 ( "[COLOR white]Top All Time Videos[/COLOR]" , "url" , 15 , iiiii , O0O0OO0O0O0 )
    I11 ( "[COLOR blue]#####################################[/COLOR]" , "url" , 9999 , iiiii , O0O0OO0O0O0 )
    I11 ( "[COLOR aqua]RESET [COLOR white]Adult [COLOR aqua]Settings[/COLOR]" , 'url' , 997 , iiiii , O0O0OO0O0O0 )
    I11 ( "[COLOR aqua]SET Password[/COLOR]" , 'url' , 900 , iiiii , O0O0OO0O0O0 )
   else :
    xbmcgui . Dialog ( ) . ok ( '[COLOR white][B]Adult Section[/B][/COLOR]' , 'Wrong Password, Please Try Again' )
    return
    if 86 - 86: iiiii11iII1 % O0o
 else :
  I11 ( "[COLOR blue]########### [B]XNXXX[/B] ###########[/COLOR]" , "url" , 9999 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR yellow][B]Search[/B][/COLOR]" , "url" , 4 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]Featured Videos[/COLOR]" , O0oo0OO0 , 1 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]New Videos[/COLOR]" , IiiIII111iI , 1 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]Hot Videos[/COLOR]" , iI1Ii11111iIi , 1 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]The Best of[/COLOR]" , IiII , 1 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]Top Hits[/COLOR]" , i1i1II , 1 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]Catagories[/COLOR]" , 'url' , 3 , iiiii , O0O0OO0O0O0 )
  I11 ( "[COLOR blue]######## [B]Perfect Girls[/B] #######[/COLOR]" , "url" , 9999 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR yellow][B]Search[/B][/COLOR]" , "url" , 10 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]Catagories[/COLOR]" , "url" , 11 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]Featured Videos[/COLOR]" , "url" , 14 , iiiii , O0O0OO0O0O0 )
  Oo0o0000o0o0 ( "[COLOR white]Top All Time Videos[/COLOR]" , "url" , 15 , iiiii , O0O0OO0O0O0 )
  I11 ( "[COLOR blue]#####################################[/COLOR]" , "url" , 9999 , iiiii , O0O0OO0O0O0 )
  I11 ( "[COLOR aqua]RESET [COLOR white]Adult [COLOR aqua]Settings[/COLOR]" , 'url' , 997 , iiiii , O0O0OO0O0O0 )
  I11 ( "[COLOR aqua]SET Password[/COLOR]" , 'url' , 900 , iiiii , O0O0OO0O0O0 )
  if 97 - 97: IIIII . I1
  ########################################################################################################
  ############################# XNXXX ####################################################################
  if 54 - 54: oO % IiiIIiiI11 / oooOOOOO * IiiIII111ii / i1iIIi1
  if 50 - 50: IiIi1Iii1I1 - O00O0O0O0
  if 75 - 75: IIIiiiiiIii / oooOOOOO % I11i
def IiI1I1 ( ) :
 OoO000 = IIiiIiI1 ( 'http://www.xnxx.com' )
 iiIiIIi = re . compile ( '<div id="side-categories" class="mobile-hide">(.+?)<div id="content-ad-side" class="mobile-hide">' , re . DOTALL ) . findall ( OoO000 )
 ooOoo0O = str ( iiIiIIi )
 OooO0 = re . compile ( '{(.+?)}' , re . DOTALL ) . findall ( ooOoo0O )
 if 35 - 35: IiiIIiiI11 % O00O0O0O0 % i11iIiiIii / oooO0oo0oOOOO
 for Ii11iI1i in OooO0 :
  Ooo = re . compile ( 'label":"(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
  O0o0Oo = re . compile ( '"url":".+?/(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
  Oo00OOOOO = O0o0Oo
  O0O = Oo00OOOOO . replace ( '\\' , '' )
  O0o0Oo = "http://www.xnxx.com" + O0O
  O00o0OO = "[COLOR white]" + Ooo + "[/COLOR]"
  Oo0o0000o0o0 ( O00o0OO , O0o0Oo , 1 , iiiii , O0O0OO0O0O0 )
  if 44 - 44: IiIi1Iii1I1 / I11i % ooO0oo0oO0 * oO + o0oOoO00o
def Ii1IOo0o0 ( name , url , iconimage ) :
 II1 = xbmcgui . DialogProgress ( )
 name , url = url . split ( '|SPLIT|' )
 name = name . replace ( '[COLOR white]' , '' ) . replace ( '[/COLOR]' , '' ) . replace ( ' - ' , '' )
 II1 . create ( Oo0Ooo , "[COLOR yellow]Please wait.[/COLOR]" , '[COLOR snow]We are getting the Video .[/COLOR]' , '' )
 url = "http://www.xnxx.com" + url
 III1ii1iII = url
 OoO000 = IIiiIiI1 ( url )
 iiIiIIi = re . compile ( '<head>(.+?)</html>' , re . DOTALL ) . findall ( OoO000 )
 ooOoo0O = str ( iiIiIIi ) . replace ( '\\' , '' ) . replace ( '(' , '' ) . replace ( ')' , '' )
 url = re . compile ( "setVideoHLS'(.+?)'" ) . findall ( ooOoo0O ) [ 0 ]
 url = url + '|User-Agent=Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&Referer=' + III1ii1iII
 oo0oooooO0 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
 II1 . close ( )
 xbmc . Player ( ) . play ( url , oo0oooooO0 , False )
 if 19 - 19: oooOOOOO + IIIiiiiiIii
def ooo ( url ) :
 if 18 - 18: IIIII
 I1i1I1II = 0
 try :
  i1IiIiiI , url = url . split ( '|' )
 except : I1i1I1II = 1
 if 31 - 31: IiiIII111ii . IiiIII111ii - IIIII / iiiii11iII1 + IIIiiiiiIii * II1Ii1iI1i
 O0ooOooooO = url
 OoO000 = IIiiIiI1 ( url )
 iiIiIIi = re . compile ( '<div id="video(.+?)</p></div>' , re . DOTALL ) . findall ( OoO000 )
 for Ii11iI1i in iiIiIIi :
  Ooo = re . compile ( 'title=(.+?)">' ) . findall ( Ii11iI1i ) [ 0 ]
  try :
   o00O = re . compile ( '<span class="video-hd-mark">(.+?)</span>' ) . findall ( Ii11iI1i ) [ 0 ]
  except :
   o00O = 'SD'
   pass
  if str ( o00O ) == "HD" :
   OOO0OOO00oo = "[COLOR yellow]" + str ( o00O ) + "[/COLOR] - "
  else :
   OOO0OOO00oo = "[COLOR lime]" + str ( o00O ) + "[/COLOR] - "
  url = re . compile ( '<a href="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
  Iii111II = re . compile ( '<img src="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
  Iii111II = Iii111II . replace ( "THUMBNUM" , "5" )
  O00o0OO = "[COLOR white]" + Ooo + "[/COLOR]"
  O00o0OO = O00o0OO . replace ( '"' , '' )
  O00o0OO = iiii11I ( O00o0OO )
  Ooo0OO0oOO = O00o0OO + '|SPLIT|' + url
  I11 ( OOO0OOO00oo + O00o0OO , Ooo0OO0oOO , 2 , Iii111II , Iii111II )
  if 50 - 50: II1Ii1iI1i
 if I1i1I1II == 1 :
  try :
   Ii1i11IIii1I = re . compile ( '<a href="([^"]*)" class="no-page">Next</a></li></ul></div>' ) . findall ( OoO000 ) [ 0 ]
   Ii1i11IIii1I = Ii1i11IIii1I . replace ( '&amp;' , '&' )
   Ii1i11IIii1I = 'http://www.xnxx.com' + Ii1i11IIii1I
   Oo0o0000o0o0 ( '[COLOR yellow]Next Page >>[/COLOR]' , Ii1i11IIii1I , 1 , next_icon , O0O0OO0O0O0 )
  except : pass
  if 52 - 52: IIIII - oooO0oo0oOOOO + IiiIII111ii + IiiIII111ii - IIIII / O00O0O0O0
  if not "http://www.xnxx.com/home/10" in O0ooOooooO :
   if "/home/" in O0ooOooooO :
    i1IiIiiI , I1I , iIi11Ii1 , Ii11iII1 , Oo0O0O0ooO0O = O0ooOooooO . split ( '/' )
    IIIIii = int ( float ( Oo0O0O0ooO0O ) ) + 1
    url = "http://www.xnxx.com/home/" + str ( IIIIii )
    Oo0o0000o0o0 ( '[COLOR yellow]Next Page >>[/COLOR]' , url , 1 , iiiii , O0O0OO0O0O0 )
   elif O0ooOooooO == "http://www.xnxx.com" :
    url = "http://www.xnxx.com/home/1"
    Oo0o0000o0o0 ( '[COLOR yellow]Next Page >>[/COLOR]' , url , 1 , iiiii , O0O0OO0O0O0 )
    if 70 - 70: IiiIII111ii / oooOOOOO . i1iIIi1 % o0oOoO00o
def OOoOO00OOO0OO ( url ) :
 ooOoo0O = ''
 iI1I111Ii111i = xbmc . Keyboard ( ooOoo0O , 'Enter Search Term' )
 iI1I111Ii111i . doModal ( )
 if iI1I111Ii111i . isConfirmed ( ) :
  ooOoo0O = iI1I111Ii111i . getText ( ) . replace ( ' ' , '+' )
  if len ( ooOoo0O ) > 1 :
   url = "http://www.xnxx.com/?k=" + ooOoo0O . lower ( )
   ooo ( url )
   if 7 - 7: IIIiiiiiIii * iiiii11iII1 % oO . IiIi1Iii1I1
   if 45 - 45: i11iIiiIii * i111I % Ii1I + I1 - IiiIII111ii
   if 17 - 17: IiIi1Iii1I1
   if 62 - 62: Ii1I * O0o
def i1OOO ( ) :
 OoO000 = IIiiIiI1 ( 'http://www.perfectgirls.net' )
 iiIiIIi = re . compile ( '<li class="header-submenu__item">(.+?)</li>' , re . DOTALL ) . findall ( OoO000 )
 for Ii11iI1i in iiIiIIi :
  O0o0Oo = re . compile ( 'href="(.+?)">.+?</a>' ) . findall ( Ii11iI1i ) [ 0 ]
  Ooo = re . compile ( 'href=".+?">(.+?)</a>' ) . findall ( Ii11iI1i ) [ 0 ]
  O0o0Oo = 'http://www.perfectgirls.net' + O0o0Oo + "/1"
  O00o0OO = "[COLOR white]" + Ooo + " [/COLOR]"
  Oo0o0000o0o0 ( O00o0OO , O0o0Oo , 12 , iiiii , O0O0OO0O0O0 )
  if 59 - 59: i111I + oooO0oo0oOOOO * O0o + ooO0oo0oO0
def Oo0OoO00oOO0o ( url ) :
 if 80 - 80: oO + IiiIIiiI11 - IiiIIiiI11 % i1iIIi1
 OoOO0oo0o = url
 I1i1I1II = 0
 try :
  i1IiIiiI , url = url . split ( '|' )
 except : I1i1I1II = 1
 if 14 - 14: IIIII * i1iIIi1 * i1iIIi1 / O0o
 O0ooOooooO = url
 OoO000 = IIiiIiI1 ( url )
 iiIiIIi = re . compile ( '<div class="list__item">(.+?)</a></div>' , re . DOTALL ) . findall ( OoO000 )
 for Ii11iI1i in iiIiIIi :
  try :
   Ooo = re . compile ( 'title="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   url = re . compile ( 'href="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   Iii111II = re . compile ( 'data-original="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   if "http" not in Iii111II :
    Iii111II = re . compile ( 'altsrc="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   time = re . compile ( '<time>(.+?)</time>' ) . findall ( Ii11iI1i ) [ 0 ]
   url = 'http://www.perfectgirls.net' + url
   Ooo0OO0oOO = Ooo + '|SPLIT|' + url
   O00o0OO = '[COLOR white]' + Ooo + '[/COLOR] - ' + time
   O00o0OO = iiii11I ( O00o0OO )
   I11 ( O00o0OO , Ooo0OO0oOO , 13 , Iii111II , Iii111II )
  except : pass
  if 81 - 81: Ii1I + Ii1I * IiIi1Iii1I1 * IIIiiiiiIii % IIIiiiiiIii
 if I1i1I1II == 1 :
  I1I = re . compile ( '<a class="btn_wrapper__btn" href="([^"]*)">Next</a></li>' ) . findall ( OoO000 ) [ 0 ]
  i1IiIiiI = OoOO0oo0o . rpartition ( '/' ) [ 0 ]
  url = i1IiIiiI + "/" + I1I
  Oo0o0000o0o0 ( '[COLOR white]Next Page >>[/COLOR]' , url , 12 , iiiii , O0O0OO0O0O0 )
def ooOO00O00oo ( ) :
 if 3 - 3: O00O0O0O0 - I11i / O00O0O0O0 % iiiii11iII1 / O00O0O0O0 . II1Ii1iI1i
 OoOO0oo0o = 'http://www.perfectgirls.net/'
 I1i1I1II = 0
 try :
  i1IiIiiI , O0o0Oo = O0o0Oo . split ( '|' )
 except : I1i1I1II = 1
 OoO000 = IIiiIiI1 ( OoOO0oo0o )
 iiIiIIi = re . compile ( '<div class="list__item">(.+?)</a></div>' , re . DOTALL ) . findall ( OoO000 )
 for Ii11iI1i in iiIiIIi :
  try :
   Ooo = re . compile ( 'title="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   O0o0Oo = re . compile ( 'href="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   Iii111II = re . compile ( 'data-original="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   if "http" not in Iii111II :
    Iii111II = re . compile ( 'altsrc="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   time = re . compile ( '<time>(.+?)</time>' ) . findall ( Ii11iI1i ) [ 0 ]
   O0o0Oo = 'http://www.perfectgirls.net' + O0o0Oo
   Ooo0OO0oOO = Ooo + '|SPLIT|' + O0o0Oo
   O00o0OO = '[COLOR white]' + Ooo + '[/COLOR] - ' + time
   O00o0OO = iiii11I ( O00o0OO )
   I11 ( O00o0OO , Ooo0OO0oOO , 13 , Iii111II , Iii111II )
  except : pass
  if 50 - 50: IiIi1Iii1I1
 if I1i1I1II == 1 :
  I1I = re . compile ( '<a class="btn_wrapper__btn" href="([^"]*)">Next</a></li>' ) . findall ( OoO000 ) [ 0 ]
  i1IiIiiI = OoOO0oo0o . rpartition ( '/' ) [ 0 ]
  O0o0Oo = i1IiIiiI + "/" + I1I
  Oo0o0000o0o0 ( '[COLOR white]Next Page >>[/COLOR]' , O0o0Oo , 12 , iiiii , O0O0OO0O0O0 )
def i11I1iIiII ( ) :
 if 96 - 96: o0oOoO00o
 OoOO0oo0o = 'http://www.perfectgirls.net/top/all/'
 I1i1I1II = 0
 try :
  i1IiIiiI , O0o0Oo = O0o0Oo . split ( '|' )
 except : I1i1I1II = 1
 OoO000 = IIiiIiI1 ( OoOO0oo0o )
 iiIiIIi = re . compile ( '<div class="list__item">(.+?)</a></div>' , re . DOTALL ) . findall ( OoO000 )
 for Ii11iI1i in iiIiIIi :
  try :
   Ooo = re . compile ( 'title="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   O0o0Oo = re . compile ( 'href="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   Iii111II = re . compile ( 'data-original="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   if "http" not in Iii111II :
    Iii111II = re . compile ( 'altsrc="(.+?)"' ) . findall ( Ii11iI1i ) [ 0 ]
   time = re . compile ( '<time>(.+?)</time>' ) . findall ( Ii11iI1i ) [ 0 ]
   O0o0Oo = 'http://www.perfectgirls.net' + O0o0Oo
   Ooo0OO0oOO = Ooo + '|SPLIT|' + O0o0Oo
   O00o0OO = '[COLOR white]' + Ooo + '[/COLOR] - ' + time
   O00o0OO = iiii11I ( O00o0OO )
   I11 ( O00o0OO , Ooo0OO0oOO , 13 , Iii111II , Iii111II )
  except : pass
  if 45 - 45: I11i * IIIII % o0oOoO00o * oooO0oo0oOOOO + i1iIIi1 . O0o
 if I1i1I1II == 1 :
  I1I = re . compile ( '<a class="btn_wrapper__btn" href="([^"]*)">Next</a></li>' ) . findall ( OoO000 ) [ 0 ]
  i1IiIiiI = OoOO0oo0o . rpartition ( '/' ) [ 0 ]
  O0o0Oo = i1IiIiiI + "/" + I1I
  Oo0o0000o0o0 ( '[COLOR white]Next Page >>[/COLOR]' , O0o0Oo , 12 , iiiii , O0O0OO0O0O0 )
  if 67 - 67: i11iIiiIii - ooO0oo0oO0 % I1 . I11i
  if 77 - 77: IiIi1Iii1I1 / II1Ii1iI1i
  if 15 - 15: IiIi1Iii1I1 . Ii1I . oooO0oo0oOOOO / i11iIiiIii - IiiIII111ii . ooO0oo0oO0
def i1O0OoO0o ( url ) :
 if 79 - 79: O0o - I11i * iiiii11iII1 + O0o % I11i * I11i
 ooOoo0O = ''
 iI1I111Ii111i = xbmc . Keyboard ( ooOoo0O , 'Enter Search Term' )
 iI1I111Ii111i . doModal ( )
 if iI1I111Ii111i . isConfirmed ( ) :
  ooOoo0O = iI1I111Ii111i . getText ( ) . replace ( ' ' , '+' )
  if len ( ooOoo0O ) > 1 :
   ooOoo0O = url . replace ( ' ' , '%20' )
   url = "http://www.perfectgirls.net/search/" + ooOoo0O . lower ( ) + '/'
   Oo0OoO00oOO0o ( url )
   if 61 - 61: i111I
def O0OOO ( name , url , iconimage ) :
 name , url = url . split ( '|SPLIT|' )
 II1 . create ( Oo0Ooo , "[COLOR yellow]Please wait.[/COLOR]" , '[COLOR snow]We are getting the Video .[/COLOR]' , '' )
 III1ii1iII = url
 OoO000 = IIiiIiI1 ( url )
 url = re . compile ( '<source src="(.+?)"' , re . DOTALL ) . findall ( OoO000 ) [ - 1 ]
 if 10 - 10: IiiIIiiI11 * oooOOOOO % O0o / II1Ii1iI1i / O0o
 import resolveurl
 if resolveurl . HostedMediaFile ( url ) . valid_url ( ) :
  url = resolveurl . HostedMediaFile ( url ) . resolve ( )
 oo0oooooO0 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
 II1 . close ( )
 xbmc . Player ( ) . play ( url , oo0oooooO0 , False )
 if 42 - 42: iiiii11iII1
 if 67 - 67: O00O0O0O0 . i1iIIi1 . I11i
 if 10 - 10: I1 % I1 - Ii1I / IiiIIiiI11 + IiiIII111ii
 if 87 - 87: oO * I1 + IiiIIiiI11 / Ii1I / i1iIIi1
 if 37 - 37: i1iIIi1 - IIIiiiiiIii * oO % i11iIiiIii - O00O0O0O0
 if 83 - 83: oooOOOOO / II1Ii1iI1i
 if 34 - 34: IiIi1Iii1I1
def Oo0o0000o0o0 ( name , url , mode , iconimage , fanart , description = None ) :
 if 57 - 57: oO . oooOOOOO . ooO0oo0oO0
 if description == None : description = ''
 description = '[COLOR white]' + description + '[/COLOR]'
 i11Iii = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&fanart=" + urllib . quote_plus ( fanart )
 IiIIIi1iIi = True
 oo0oooooO0 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
 oo0oooooO0 . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 oo0oooooO0 . setProperty ( "fanart_Image" , fanart )
 oo0oooooO0 . setProperty ( "icon_Image" , iconimage )
 IiIIIi1iIi = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = i11Iii , listitem = oo0oooooO0 , isFolder = True )
 return IiIIIi1iIi
 if 68 - 68: i11iIiiIii % I1 + i11iIiiIii
def I11 ( name , url , mode , iconimage , fanart , description = None ) :
 if 31 - 31: i111I . II1Ii1iI1i
 if description == None : description = ''
 description = '[COLOR white]' + description + '[/COLOR]'
 i11Iii = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&fanart=" + urllib . quote_plus ( fanart )
 IiIIIi1iIi = True
 oo0oooooO0 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
 oo0oooooO0 . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 oo0oooooO0 . setProperty ( "fanart_Image" , fanart )
 oo0oooooO0 . setProperty ( "icon_Image" , iconimage )
 IiIIIi1iIi = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = i11Iii , listitem = oo0oooooO0 , isFolder = False )
 return IiIIIi1iIi
 if 1 - 1: o0oOoO00o / IIIII % i1iIIi1 * IiIi1Iii1I1 . i11iIiiIii
def oOOoo00O0O ( ) :
 Ii11iII1 = xbmcgui . Dialog ( ) . yesno ( '[COLOR white]Adult Section[/COLOR]' , 'Would You Like To Set a Password for the Adult Section?' )
 if Ii11iII1 :
  i1111 = xbmc . Keyboard ( '' , 'Please Enter a Password' , False )
  i1111 . doModal ( )
  if ( i1111 . isConfirmed ( ) ) :
   i11 = i1111 . getText ( )
   if i11 == "" :
    xbmcgui . Dialog ( ) . notification ( '[COLOR yellow]Password Cannot Be Blank[/COLOR]' , 'Adult Section' )
    oOOoo00O0O ( )
   else :
    plugintools . set_setting ( 'xxxpass' , i11 )
    plugintools . set_setting ( 'enablexxxpass' , 'true' )
    xbmcgui . Dialog ( ) . ok ( '[COLOR white]Adult Section[/COLOR]' , 'Password has been set' )
    if 2 - 2: I1 * oooOOOOO - Ii1I + II1Ii1iI1i . oO % i1iIIi1
def ooOOOoOooOoO ( ) :
 Ii11iII1 = xbmcgui . Dialog ( ) . yesno ( '[COLOR white]Adult Section[/COLOR]' , 'Are you sure you want to change your Password for the Adult Section?' )
 if Ii11iII1 :
  i1111 = xbmc . Keyboard ( '' , 'Please Enter a Password' , False )
  i1111 . doModal ( )
  if ( i1111 . isConfirmed ( ) ) :
   i11 = i1111 . getText ( )
   if i11 == "" :
    xbmcgui . Dialog ( ) . notification ( '[COLOR yellow]Password Cannot Be Blank[/COLOR]' , 'Adult Section' )
    ooOOOoOooOoO ( )
   else :
    plugintools . set_setting ( 'xxxpass' , i11 )
    plugintools . set_setting ( 'enablexxxpass' , 'true' )
    xbmcgui . Dialog ( ) . ok ( '[COLOR white]Adult Section[/COLOR]' , 'Password has been Changed' )
    if 91 - 91: i1iIIi1 % ooO0oo0oO0 % Ii1I
def IIi1I11I1II ( ) :
 plugintools . set_setting ( 'enablexxxpass' , 'false' )
 plugintools . set_setting ( 'xxxpass' , "" )
 xbmcgui . Dialog ( ) . ok ( '[COLOR white]Adult Section[/COLOR]' , 'Password has been DISABLED' )
 if 63 - 63: oooO0oo0oOOOO - iiiii11iII1 . i111I / IIIII . O0o / I11i
def iiii11I ( text ) :
 text = str ( text )
 text = text . replace ( '\\r' , '' )
 text = text . replace ( '\\n' , '' )
 text = text . replace ( '\\t' , '' )
 text = text . replace ( '\\' , '' )
 text = text . replace ( '<br />' , '\n' )
 text = text . replace ( '<hr />' , '' )
 text = text . replace ( '&#039;' , "'" )
 text = text . replace ( '&quot;' , '"' )
 text = text . replace ( '&rsquo;' , "'" )
 text = text . replace ( '&amp;' , "&" )
 text = text . replace ( '&#39;' , "'" )
 text = text . replace ( '&#8211;' , "&" )
 text = text . replace ( '&#8217;' , "'" )
 text = text . replace ( '&#038;' , "&" )
 text = text . lstrip ( ' ' )
 text = text . lstrip ( '    ' )
 if 84 - 84: IiIi1Iii1I1
 return text
 if 86 - 86: O0o - IiiIII111ii - iiiii11iII1 * i1iIIi1
 if 66 - 66: oooO0oo0oOOOO + I11i
 if 11 - 11: oooOOOOO + oooO0oo0oOOOO - iiiii11iII1 / IIIII + o0oOoO00o . i111I
def IIiiIiI1 ( url ) :
 i1Iii1i1I = urllib2 . Request ( url )
 if not "referer" in url . lower ( ) :
  i1Iii1i1I . add_header ( 'Referer' , 'https://www.google.com/' )
 if not "user-agent" in url . lower ( ) :
  i1Iii1i1I . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36' )
 OOoO00 = urllib2 . urlopen ( i1Iii1i1I , timeout = 10 )
 IiI111111IIII = OOoO00 . read ( )
 OOoO00 . close ( )
 return IiI111111IIII
 if 37 - 37: O00O0O0O0 / O0o
 if 23 - 23: I11i
 if 85 - 85: IiiIII111ii
def OO ( ) :
 oo000o = [ ]
 iiIi1IIi1I = sys . argv [ 2 ]
 if len ( iiIi1IIi1I ) >= 2 :
  o0OoOO000ooO0 = sys . argv [ 2 ]
  o0o0o0oO0oOO = o0OoOO000ooO0 . replace ( '?' , '' )
  if ( o0OoOO000ooO0 [ len ( o0OoOO000ooO0 ) - 1 ] == '/' ) :
   o0OoOO000ooO0 = o0OoOO000ooO0 [ 0 : len ( o0OoOO000ooO0 ) - 2 ]
  ii1Ii11I = o0o0o0oO0oOO . split ( '&' )
  oo000o = { }
  for o00o0 in range ( len ( ii1Ii11I ) ) :
   ii = { }
   ii = ii1Ii11I [ o00o0 ] . split ( '=' )
   if ( len ( ii ) ) == 2 :
    oo000o [ ii [ 0 ] ] = ii [ 1 ]
    if 84 - 84: IIIII % i111I . i11iIiiIii / iiiii11iII1
 return oo000o
 if 80 - 80: O00O0O0O0 . i11iIiiIii - IIIII
o0OoOO000ooO0 = OO ( ) ; O00o0OO = None ; O0o0Oo = None ; iIiIIi1 = None ; Iii111II = None ; I1IIII1i = None
try : O00o0OO = urllib . unquote_plus ( o0OoOO000ooO0 [ "name" ] )
except : pass
try : O0o0Oo = urllib . unquote_plus ( o0OoOO000ooO0 [ "url" ] )
except : pass
try : iIiIIi1 = int ( o0OoOO000ooO0 [ "mode" ] )
except : pass
try : Iii111II = urllib . unquote_plus ( o0OoOO000ooO0 [ "iconimage" ] )
except : pass
try : I1IIII1i = urllib . quote_plus ( o0OoOO000ooO0 [ "fanartimage" ] )
except : pass
if 2 - 2: oooOOOOO + IiiIII111ii - II1Ii1iI1i % IIIII . i1iIIi1
if iIiIIi1 == None or O0o0Oo == None or len ( O0o0Oo ) < 1 : i1 ( )
if 18 - 18: IiiIIiiI11 + i1iIIi1 - IiiIII111ii . i111I + i11iIiiIii
elif iIiIIi1 == 1 : ooo ( O0o0Oo )
elif iIiIIi1 == 2 : Ii1IOo0o0 ( O00o0OO , O0o0Oo , Iii111II )
elif iIiIIi1 == 3 : IiI1I1 ( )
elif iIiIIi1 == 4 : OOoOO00OOO0OO ( O0o0Oo )
if 20 - 20: O00O0O0O0
elif iIiIIi1 == 7 : AgreeWindow ( msg = msg )
if 52 - 52: i111I - oooO0oo0oOOOO % IiiIII111ii + II1Ii1iI1i * o0oOoO00o . IiIi1Iii1I1
elif iIiIIi1 == 10 : i1O0OoO0o ( O0o0Oo )
elif iIiIIi1 == 11 : i1OOO ( )
elif iIiIIi1 == 12 : Oo0OoO00oOO0o ( O0o0Oo )
elif iIiIIi1 == 13 : O0OOO ( O00o0OO , O0o0Oo , Iii111II )
elif iIiIIi1 == 14 : ooOO00O00oo ( )
elif iIiIIi1 == 15 : i11I1iIiII ( )
if 75 - 75: IIIiiiiiIii + O0o + IIIII * oooOOOOO % oO . i1iIIi1
elif iIiIIi1 == 900 : oOOoo00O0O ( )
elif iIiIIi1 == 901 : PARENTAL_CONTROLS_PIN ( )
elif iIiIIi1 == 902 : PARENTAL_CONTROLS_OFF ( )
if 55 - 55: IiiIIiiI11 . II1Ii1iI1i
elif iIiIIi1 == 997 : IIi1I11I1II ( )
elif iIiIIi1 == 998 : VIEW_DIALOG ( O0o0Oo )
elif iIiIIi1 == 999 : ooOOOoOooOoO ( )
if 61 - 61: o0oOoO00o % IiIi1Iii1I1 . o0oOoO00o
if 100 - 100: O00O0O0O0 * I11i
if 64 - 64: IiiIIiiI11 % Ii1I * oO
if iIiIIi1 == None : xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) , cacheToDisc = False )
else : xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) , cacheToDisc = True ) # dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')